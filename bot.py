import os
import torch
import logging
import psycopg2
from transformers import AutoModelForSequenceClassification, AutoTokenizer
from telegram import Update
from telegram.ext import Application, MessageHandler, filters, CommandHandler, CallbackContext

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–∞ –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv("TOKEN")
DATABASE_URL = os.getenv("DATABASE_URL")

MODEL_PATH = "tetianamohorian/hate_speech_model"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(levelname)s - %(message)s",
    level=logging.INFO,
    handlers=[
        logging.FileHandler("log.txt"),
        logging.StreamHandler()
    ]
)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
def create_table_if_not_exists():
    try:
        conn = psycopg2.connect(DATABASE_URL)
        cursor = conn.cursor()
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS violators (
                id SERIAL PRIMARY KEY,
                username VARCHAR(255),
                message TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            );
        """)
        conn.commit()
        cursor.close()
        conn.close()
        logging.info("‚úÖ –¢–∞–±–ª–∏—Ü–∞ violators –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞/—Å–æ–∑–¥–∞–Ω–∞.")
    except Exception as err:
        logging.error(f"‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã: {err}")

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Ä—É—à–∏—Ç–µ–ª—è
def save_violator(username, message):
    try:
        conn = psycopg2.connect(DATABASE_URL)
        cursor = conn.cursor()
        query = "INSERT INTO violators (username, message) VALUES (%s, %s)"
        cursor.execute(query, (username, message))
        conn.commit()
        cursor.close()
        conn.close()
        logging.info("‚úÖ –ù–∞—Ä—É—à–∏—Ç–µ–ª—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –±–∞–∑—É.")
    except Exception as err:
        logging.error(f"‚ùó –û—à–∏–±–∫–∞ PostgreSQL: {err}")

# –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
tokenizer = AutoTokenizer.from_pretrained(MODEL_PATH)
model = AutoModelForSequenceClassification.from_pretrained(MODEL_PATH).to(device)

def classify_text(text):
    model.eval()
    inputs = tokenizer(text, return_tensors="pt", truncation=True, padding="max_length", max_length=128).to(device)
    with torch.no_grad():
        outputs = model(**inputs)
    logits = outputs.logits
    pred = torch.argmax(logits, dim=-1).item()
    return "üõë Nen√°vistn√° reƒç" if pred == 1 else "‚úÖ OK"

async def check_message(update: Update, context: CallbackContext):
    message_text = update.message.text
    result = classify_text(message_text)

    if result == "üõë Nen√°vistn√° reƒç":
        username = update.message.from_user.username or "unknown"
        await update.message.reply_text("‚ö†Ô∏è Upozornenie! Dodr≈æiavajte kult√∫ru komunik√°cie.")
        await update.message.delete()
        logging.warning(f"Toxick√° spr√°va od {username}: {message_text}")
        save_violator(username, message_text)

async def start(update: Update, context: CallbackContext):
    await update.message.reply_text("Ahoj! Sledujem kult√∫ru komunik√°cie v chate!")

def main():
    create_table_if_not_exists()

    app = Application.builder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, check_message))

    logging.info("‚úÖ Bot started successfully!")
    logging.info("üß™ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ç–µ—Å—Ç–æ–≤–∞—è –≤—Å—Ç–∞–≤–∫–∞ –≤ –±–∞–∑—É...")
    save_violator("test_user", "test message")

    app.run_polling()

if __name__ == "__main__":
    while True:
        try:
            main()
        except Exception as e:
            logging.error(f"‚ùó Bot crashed with error: {e}")
        finally:
            import time
            logging.info("‚ôªÔ∏è Restarting bot in 10 seconds...")
            time.sleep(10)
